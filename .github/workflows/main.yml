name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches:
      - main  # main 브랜치에 merge될 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2  # AWS 리전 설정
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_ENDPOINT: ${{ secrets.DB_ENDPOINT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      S3_ACCESSKEY: ${{ secrets.S3_ACCESSKEY }}
      S3_SECRETKEY: ${{ secrets.S3_SECRETKEY }}
      S3_NAME: ${{ secrets.S3_NAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      # 1. GitHub 리포지토리에서 소스 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. AWS ECR에 로그인
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 3. Docker 이미지를 빌드하기 전 application.properties 파일 생성
      - name: Create application.properties file
        run: |
          mkdir -p src/main/resources
          echo "spring.application.name=coverRanking" > src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "spring.datasource.url=jdbc:mysql://${DB_ENDPOINT}/${DB_NAME}?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true" >> src/main/resources/application.properties
          echo "spring.datasource.username=${DB_USERNAME}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${DB_PASSWORD}" >> src/main/resources/application.properties
          echo "cloud.aws.region.static=ap-northeast-2" >> src/main/resources/application.properties
          echo "cloud.aws.stack.auto=false" >> src/main/resources/application.properties
          echo "cloud.aws.credentials.accessKey=${S3_ACCESSKEY}" >> src/main/resources/application.properties
          echo "cloud.aws.credentials.secretKey=${S3_SECRETKEY}" >> src/main/resources/application.properties
          echo "cloud.aws.s3.bucket=${S3_NAME}" >> src/main/resources/application.properties
          echo "spring.jwt.secret=${JWT_SECRET}" >> src/main/resources/application.properties

      # 4. gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # 6. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 7. Docker 이미지를 빌드
      - name: Build Docker image
        run: |
          ./gradlew build
          docker build -t coverranking .
          docker tag coverranking:latest 184026730085.dkr.ecr.ap-northeast-2.amazonaws.com/coverranking:latest

      # 8. AWS ECR에 Docker 이미지 푸시
      - name: Push Docker image to AWS ECR
        run: |
          docker push 184026730085.dkr.ecr.ap-northeast-2.amazonaws.com/coverranking:latest
